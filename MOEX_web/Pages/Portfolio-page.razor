@page "/"
@using MOEX.Services
@inject MoexService moexService
@using MOEX.Portfolio
@using MatBlazor

<h1>Stock Price Getter!</h1>
<h2>Period</h2>
<p><MatDatePicker @bind-Value="@startDate" Label="Start Date" Format="MMMM dd, yyyy"></MatDatePicker> <MatDatePicker @bind-Value="@endDate" Label="End Date" Format="MMMM dd, yyyy"></MatDatePicker></p>

<h2>Stocks</h2>
<p>
    <MatTextField @bind-Value="@stockName" Label="Stock"></MatTextField>
    <MatTextField @bind-Value="@stockValue" Label="Value"></MatTextField>
</p>
<p>
    <MatButton Raised="true" OnClick="@AddDataClick">Add Stock to Portfolio</MatButton>
    <MatButton Raised="true" OnClick="@LoadPortfolioClick">Load Saved Portfolio</MatButton>
</p>

<p>Double click to delete stock</p>
<p>
    <MatTable Items="@wallet.Stocks" class="mat-elevation-z5" ShowPaging="false" Striped="true" AllowSelection="true" OnRowDbClick="@DeleteStock">
        <MatTableHeader>
            <th>Name</th>
            <th>Value</th>
            <th width="400px">Price at Start</th>
            <th>Price at End</th>
        </MatTableHeader>
        <MatTableRow>
            <td>@context.Name</td>
            <td>@String.Format($"{@context.Value:N1}")</td>
            <td>@context.StartPrice</td>
            <td>@context.EndPrice</td>
        </MatTableRow>
    </MatTable>
    <MatButton Raised="true" OnClick="@SavePortfolioClick">Save Portfolio</MatButton>
</p>
<p>
    <MatNumericUpDownField Label="Choose interval between balancing, months"
                           @bind-Value=@balancingInterval
                           DecimalPlaces=0
                           Minimum=0 Maximum=18>
    </MatNumericUpDownField>
</p>
<p>
    <MatButton Raised="true" OnClick="@GetDataAsync">Get Data</MatButton>
</p>

<h2>Portfolio Results</h2>
<table>
    <tr><td width="220px"><h3>Value at Start</h3></td><td><h3>@String.Format($"{wallet.StartValue:N1}")</h3></td></tr>
    <tr><td><h3>Value at End</h3></td><td><h3>@String.Format($"{wallet.EndValue:N1}")</h3></td></tr>
    <tr><td><h3>Change</h3></td><td><h3>@String.Format($"{wallet.EndValue / wallet.StartValue:P1}")</h3></td></tr>
</table>

@code
{

    public string stockName = "FXUS";
    public double stockValue = 1;
    public DateTime startDate;
    public DateTime endDate;
    private string PortfolioFile = @"Data\portfolio.json";
    public Wallet wallet = new Wallet();
    public int balancingInterval = 0;

    void AddDataClick(MouseEventArgs e) => AddData(stockName, stockValue);
    public void AddData(string stockName, double stockValue) => wallet.AddStock(new Stock(stockName, stockValue));

    public async Task GetDataAsync()
    {
        wallet.SetDates(startDate, endDate);
        if (balancingInterval > 0) wallet.AddDatesForBalancing(balancingInterval);
        await moexService.GetPricesAsync(wallet);
        wallet.CalcStartValue();
        wallet.CalcEndValue();

    }

    public void DeleteStock(object item) => wallet.Stocks.Remove(item as StockWithHistory);

    public async Task SavePortfolioClick(MouseEventArgs e) => await SavingData.PushDataToFileAsync(wallet.Stocks, PortfolioFile);

    public async Task LoadPortfolioClick(MouseEventArgs e) => wallet = new Wallet(await SavingData.LoadDataFromFileAsync(PortfolioFile));

    protected override Task OnInitializedAsync()
    {
        endDate = DateTime.Today.AddDays(-2).SetToWorkDay();
        startDate = endDate.AddDays(-365).SetToWorkDay();

        return Task.CompletedTask;
    }
}
